import pandas as pd

"""
Example JSON input:
{
    "params": {
        "date_begin": "20220221",
        "date_end": "20230221"
    },
    "config": {
        "repeat": "True",
        "seconds_delay": "86400"
    }
}
"""

"""
Example JSON output:
{
    "records": [
        {
            "date_begin": "20220221",
            "date_end": "20230221"            
        }
    ],
    "params": {
        "date_begin": "20220221",
        "date_end": "20230221"
    },
    "config": {
        "repeat": "True",
        "seconds_delay": "172259200800",
        "state_machine_arn": "arn:aws:states:us-east-1:485809471371:stateMachine:ASOS"
    }
}
"""

def lambda_handler(event, context)
    # If we had to engineer the inputs and split them among different lambdas, here is where we would do it. Fortunately, we don't seem to need to.
    payload = list()

    print(event)

    params = event['params']
    config = event['config']
    config['state_machine_arn'] = os.environ.get('STATE_MACHINE_ARN')    
    
    return {
        #"records": payload,
        "params": params, 
        "config": config
    }

def make_table():
    conn = pg8000.native.Connection(
        user = os.environ.get('DB_USERNAME').encode('EUC-JP'),
        password = os.environ.get('DB_PASSWORD').encode('EUC-JP'),
        host = os.environ.get('DB_HOSTNAME'),
        database = os.environ.get('DB_NAME').encode('EUC-JP'),
        port = 5432
    ) 

    DDL = """CREATE TABLE IF NOT EXISTS "weather_historical" (
            "weather_historical_id" INT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "weather_datetime" TIMESTAMP,
            "apparent_temp" REAL,
            "air_temp" REAL,
            "relative_humidity" REAL,
            "total_precipitation" REAL,
            "latitude" REAL,
            "longitude" REAL,
            "station_id" INT,
            "station_name" VARCHAR
            );"""

    conn.run(DDL)