import pandas as pd
import os
import pg8000.native
import math
import numpy as np

"""
Example JSON input:
{
    "params": {
        "date_begin": "20220221",
        "date_end": "20230221"
    },
    "config": {
        "repeat": "True",
        "seconds_delta": "86400"
    }
}
"""

"""
Example JSON output:
{
    "records": [
        {
            "date_begin": "20220221",
            "date_end": "20230221"            
        }
    ],
    "params": {
        "date_begin": "20220221",
        "date_end": "20230221"
    },
    "config": {
        "repeat": "True",
        "seconds_delay": "172259200800",
        "state_machine_arn": "arn:aws:states:us-east-1:485809471371:stateMachine:ASOS"
    }
}
"""

def lambda_handler(event, context):
    print(event)

    make_table()


    params = event['params']
    config = event['config']
    config['state_machine_arn'] = os.environ.get('STATE_MACHINE_ARN')    
    dates = define_yyyymmdd_date_range(params['date_begin'], params['date_end'])
    num_lambdas = math.ceil(len(dates)/90)



    payload = [
                {
                    'date_begin': datetime.strptime(x.tolist()[0], '%Y%m%d').strftime('%Y%m%d'), 
                    'date_end': datetime.strptime(x.tolist()[-1], '%Y%m%d').strftime('%Y%m%d')
                }
                for x in np.array_split(dates, num_lambdas)
            ]
    
    return {
        "records": payload,
        "params": params, 
        "config": config
    }

def make_table():
    conn = pg8000.native.Connection(
        user = os.environ.get('DB_USERNAME').encode('EUC-JP'),
        password = os.environ.get('DB_PASSWORD').encode('EUC-JP'),
        host = os.environ.get('DB_HOSTNAME'),
        database = os.environ.get('DB_NAME').encode('EUC-JP'),
        port = 5432
    ) 

    DDL = """CREATE TABLE IF NOT EXISTS "weather_historical" (
            "weather_historical_id" INT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "weather_datetime" TIMESTAMP,
            "apparent_temperature" REAL,
            "air_temperature" REAL,
            "dewpoint_temperature" REAL,
            "relative_humidity" REAL,
            "total_precipitation" REAL,
            "wind_speed" REAL,
            "latitude" REAL,
            "longitude" REAL,
            "station_name" VARCHAR
            );"""

    conn.run(DDL)

def define_yyyymmdd_date_range(start, end):
    # We define a date range here because it simplifies assigning the number of lambdas.
    return [d.strftime('%Y%m%d') for d in pd.date_range(start, end, inclusive='left')]