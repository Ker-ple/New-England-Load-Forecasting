import pg8000.native

def lambda_handler(event, context):
    if event['config']['first_setup'] == "False":
        return event

    conn = pg8000.native.Connection(
        user = os.environ.get('DB_USERNAME').encode('EUC-JP'),
        password = os.environ.get('DB_PASSWORD').encode('EUC-JP'),
        host = os.environ.get('DB_HOSTNAME'),
        database = os.environ.get('DB_NAME').encode('EUC-JP'),
        port = 5432
    )

    DDLs = [
        """CREATE TABLE IF NOT EXISTS "grid_load" (
            "load_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "load_datetime" TIMESTAMP,
            "actual_load" REAL,
            "zone_id" int 
            );"""
            ,
        """CREATE TABLE IF NOT EXISTS "grid_forecast" (
            "forecast_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "forecasted_at" TIMESTAMP,
            "forecasted_for" TIMESTAMP,
            "forecasted_load" REAL,
            "zone_id" int
            );"""
            ,
        """CREATE TABLE IF NOT EXISTS "weather_historical" (
            "weather_historical_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "weather_datetime" TIMESTAMP,
            "apparent_temp" REAL,
            "air_temp" REAL,
            "relative_humidity" REAL,
            "total_precipitation" REAL,
            "station_id" int
            );"""
            ,
        """CREATE TABLE IF NOT EXISTS "weather_forecasts" (
            "weather_forecast_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "forecasted_at" TIMESTAMP,
            "forecasted_for" TIMESTAMP,
            "apparent_temp" REAL,
            "air_temp" REAL,
            "relative_humidity" REAL,
            "total_precipitation" REAL,
            "forecast_area_id" int
            );"""
            ,
        """CREATE TABLE IF NOT EXISTS "load_zones" (
            "zone_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "zone_name" VARCHAR
            );"""
            ,
        """CREATE TABLE IF NOT EXISTS "forecast_areas" (
            "forecast_area_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "forecast_area_name" VARCHAR,
            "poi_id" int
            );"""
            ,
        """CREATE TABLE IF NOT EXISTS "weather_stations" (
            "station_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "station_name" VARCHAR,
            "poi_id" int
            );"""
            ,
        """CREATE TABLE IF NOT EXISTS "points_of_interest" (
            "place_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "longitude" REAL,
            "latitude" REAL,
            "zone_id" int,
            UNIQUE(longitude, latitude)
            );"""
            ,
        """ALTER TABLE "grid_load" ADD FOREIGN KEY ("zone_id") 
            REFERENCES "load_zones" ("zone_id")
            ;"""
            ,
        """ALTER TABLE "grid_forecast" ADD FOREIGN KEY ("zone_id") 
            REFERENCES "load_zones" ("zone_id")
            ;"""
            ,
        """ALTER TABLE "weather_historical" ADD FOREIGN KEY ("station_id") 
            REFERENCES "weather_stations" ("station_id")
            ;"""
            ,
        """ALTER TABLE "weather_forecasts" ADD FOREIGN KEY ("forecast_area_id") 
            REFERENCES "weather_forecast_areas" ("forecast_area_id")
            ;"""
            ,
        """ALTER TABLE "forecast_areas" ADD FOREIGN KEY ("poi_id") 
            REFERENCES "points_of_Interest" ("place_id")
            ;"""
            ,
        """ALTER TABLE "weather_stations" ADD FOREIGN KEY ("poi_id") 
            REFERENCES "points_of_interest" ("place_id")
            ;"""
            ,
        """ALTER TABLE "points_of_interest" ADD FOREIGN KEY ("zone_id") 
            REFERENCES "load_zones" ("zone_id")
            ;"""
        ]

    conn.run(**DDLs)
    print('finished creating database structure.')

    load_zones = [
        {
            'zone_name': 'The Hub',
            'zone_id': 4000
        },
        {
            'zone_name': 'Maine',
            'zone_id': 4001
        },
        {
            'zone_name': 'New Hampshire',
            'zone_id': 4002
        },
        {
            'zone_name': 'Vermont',
            'zone_id': 4003 
        },
        {
            'zone_name': 'Connecticut',
            'zone_id': 4004
        },
        {
            'zone_name': 'Rhode Island'
            'zone_id': 4005
        },
        {
            'zone_name': 'Southeast Mass.',
            'zone_id': 4006
        },
        {
            'zone_name': 'Western/Central Mass.',
            'zone_id': 4007
        },
        {
            'zone_name': 'Northeast Mass.',
            'zone_id': 4008
        }
    ]

    for zone in load_zones:
        cols = ', '.join(f'"{k}"' for k in zone.keys())   
        vals = ', '.join(f':{k}' for k in zone.keys())
        stmt = f"""INSERT INTO "load_zones" ({cols}) VALUES ({vals});"""
        conn.run(stmt, **zone)

    weather_stations = [
        {
            
        }
    ]

    return event